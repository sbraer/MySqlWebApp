apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
      - name: init-mysql
        image: mysql:5.7
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/master.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/slave.cnf /mnt/conf.d/
          fi
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql
        image: gcr.io/google-samples/xtrabackup:1.0
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Skip the clone if data already exists.
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          # Skip the clone on master (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          # Clone data from previous peer.
          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql --host=127.0.0.1 --user=root --password=$(</etc/secret-volume/rootPassword)
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: secretvolume
          readOnly: true
          mountPath: "/etc/secret-volume"
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD_FILE
          value: /etc/secret-volume/rootPassword
        - name: MYSQL_USER_FILE
          value: /etc/secret-volume/username
        - name: MYSQL_PASSWORD_FILE
          value: /etc/secret-volume/password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysecret
              key: databaseName
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: secretvolume
          readOnly: true
          mountPath: "/etc/secret-volume"
        resources:
          requests:
            cpu: 250m
            memory: 512M
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
            #command: ["/bin/sh","/etc/secret-volume/mysqlPing.sh"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            #command: ["mysql", "-uroot","--defaults-extra-file", "/etc/secret-volume/mysqlConfigFile", "--protocol", "tcp", "-h", "127.0.0.1", "-e", "SELECT 1"]
            command: ["/bin/sh","/etc/secret-volume/mysqlReadinessFile.sh"]
          initialDelaySeconds: 15
          periodSeconds: 2
          timeoutSeconds: 1
      - name: xtrabackup
        image: gcr.io/google-samples/xtrabackup:1.0
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Before create table and some data for the website
          # Skip the clone on master (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          if [[ $ordinal -eq '0' ]]; then
            databaseName=$(</etc/secret-volume/databaseName)
            echo "Wait until database is ready..."
            until mysql -uroot -p$(</etc/secret-volume/rootPassword) -h 127.0.0.1 --protocol tcp -e "SELECT 1"; do sleep 3; done
            echo "Insert data is not present"
            mysql -uroot -p$(</etc/secret-volume/rootPassword) -h 127.0.0.1 --protocol tcp -e "CREATE DATABASE IF NOT EXISTS $databaseName"
            mysql -uroot -p$(</etc/secret-volume/rootPassword) -h 127.0.0.1 --protocol tcp $databaseName < /mnt/config-map/Sql1-StructureUsers.sql
            mysql -uroot -p$(</etc/secret-volume/rootPassword) -h 127.0.0.1 --protocol tcp $databaseName < /mnt/config-map/Sql2-StructureArticles.sql
            mysql -uroot -p$(</etc/secret-volume/rootPassword) -h 127.0.0.1 --protocol tcp $databaseName < /mnt/config-map/Sql3-InsertDataUsers.sql
            mysql -uroot -p$(</etc/secret-volume/rootPassword) -h 127.0.0.1 --protocol tcp $databaseName < /mnt/config-map/Sql4-InsertDataArticles.sql
            echo "Insert or update completed"
          fi

          cd /var/lib/mysql

          # Determine binlog position of cloned data, if any.
          if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
            # XtraBackup already generated a partial "CHANGE MASTER TO" query
            # because we're cloning from an existing slave. (Need to remove the tailing semicolon!)
            cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
            # Ignore xtrabackup_binlog_info in this case (it's useless).
            rm -f xtrabackup_slave_info xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # We're cloning directly from master. Parse binlog position.
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm -f xtrabackup_binlog_info xtrabackup_slave_info
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi

          # Check if we need to complete a clone by starting replication.
          if [[ -f change_master_to.sql.in ]]; then
            echo "Waiting for mysqld to be ready (accepting connections)"
            until mysql -uroot -p$(</etc/secret-volume/rootPassword) -h 127.0.0.1 --protocol tcp -e "SELECT 1"; do sleep 1; done

            echo "Initializing replication from clone position"
            mysql -u root -p$(</etc/secret-volume/rootPassword) -h 127.0.0.1 \
                  -e "$(<change_master_to.sql.in), \
                          MASTER_HOST='mysql-0.mysql', \
                          MASTER_USER='root', \
                          MASTER_PASSWORD='$(</etc/secret-volume/rootPassword)', \
                          MASTER_CONNECT_RETRY=10; \
                        START SLAVE;" || exit 1
            # In case of container restart, attempt this at-most-once.
            mv change_master_to.sql.in change_master_to.sql.orig
          fi

          if [[ $ordinal -eq '0' ]]; then
            echo "Wait to add grant to user"
            until mysql -uroot -p$(</etc/secret-volume/rootPassword) -h 127.0.0.1 --protocol tcp -e "SELECT 1"; do sleep 1; done
            mysql -u root -p$(</etc/secret-volume/rootPassword) -h 127.0.0.1 \
                  -e "GRANT SELECT ON mysql.* TO '$(</etc/secret-volume/username)'@'%'; \
                      GRANT SUPER ON *.* TO '$(</etc/secret-volume/username)'@'%';
                      FLUSH PRIVILEGES;" || exit 1
          fi

          # Start a server to send backups when requested by peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=$(</etc/secret-volume/rootPassword)"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: secretvolume
          readOnly: true
          mountPath: "/etc/secret-volume"
        - name: config-map
          mountPath: /mnt/config-map
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
      - name: secretvolume
        secret:
          secretName: mysecret
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      #storageClassName: fast
      accessModes: 
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
